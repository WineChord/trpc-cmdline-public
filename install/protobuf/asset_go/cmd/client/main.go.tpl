// Package main is originally generated by trpc-cmdline {{ .TRPCCmdlineVersion }}.
// It is located at `project/cmd/client`.
// Run this file by executing `go run cmd/client/main.go` in the project directory.
package main 

{{ $domainName := .Domain }}
{{ $groupName := .GroupName }}
{{ $versionSuffix := .VersionSuffix }}
{{- $serviceProtocol := .Protocol -}}
{{- $goPkgName := .PackageName -}}
{{- with .FileOptions.go_package -}}
  {{- $goPkgName = . -}}
{{- end -}}
import (
	trpc "{{$domainName}}/{{$groupName}}/trpc-go{{$versionSuffix}}"
	"{{$domainName}}/{{$groupName}}/trpc-go{{$versionSuffix}}/client"
	"{{$domainName}}/{{$groupName}}/trpc-go{{$versionSuffix}}/log"
	_ "{{ $domainName }}/{{ $groupName }}/trpc-filter/debuglog{{ $versionSuffix }}"
	{{- if (or .ValidateEnabled .SecvEnabled)  }}
	_ "{{ $domainName }}/{{ $groupName }}/trpc-filter/validation{{ $versionSuffix }}"
	{{- end }}
	pb "{{ trimright ";" $goPkgName }}"
	{{ range $.ImportsX }}
		{{.Name}} "{{.Path}}"
	{{ end }}
)
{{- range $index, $service := .Services -}}
{{- $svrNameCamelCase := $service.Name | camelcase -}}
{{- range $mindex, $method := $service.RPC -}}
{{- $rpcName := $method.Name | camelcase -}}
{{- $rpcReqType := $method.RequestType -}}
{{- $rpcRspType := $method.ResponseType -}}

{{- $reqTypePkg := $method.RequestTypePkgDirective -}}
{{- with $method.RequestTypeFileOptions.go_package -}}
  {{- $reqTypePkg = . -}}
{{- end -}}

{{- $rspTypePkg := $method.ResponseTypePkgDirective -}}
{{- with $method.ResponseTypeFileOptions.go_package -}}
  {{- $rspTypePkg = . -}}
{{- end -}}

{{- if (eq $reqTypePkg $goPkgName) -}}
	{{- $rpcReqType = (printf "pb.%s" (splitList "." $rpcReqType|last|export|camelcase)) -}}
{{- else -}}
	{{- $rpcReqType = (gofulltype $rpcReqType $.FileDescriptor) -}}
{{- end -}}

{{- if (eq $rspTypePkg $goPkgName) -}}
	{{- $rpcRspType = (printf "pb.%s" (splitList "." $rpcRspType|last|export|camelcase)) -}}
{{- else -}}
	{{- $rpcRspType = (gofulltype $rpcRspType $.FileDescriptor) -}}
{{- end }}

func call{{$svrNameCamelCase}}{{$rpcName}}() {
	proxy := pb.New{{$svrNameCamelCase}}ClientProxy(
		client.WithTarget("ip://127.0.0.1:{{add 8000 $index}}"),
		client.WithProtocol("{{$serviceProtocol}}"),
	)
	ctx := trpc.BackgroundContext()
{{- if and $method.ClientStreaming $method.ServerStreaming}}
	// Example of using a bidirectional streaming client.
	stream, err := proxy.{{$rpcName}}(ctx)
	if err != nil {
		log.Fatalf("err: %v", err)
	}
	for i := 0; i < 5; i++ {
		if err := stream.Send(&{{$rpcReqType}}{}); err != nil {
			log.Fatalf("err: %v", err)
		}
	}
	if err := stream.CloseSend(); err != nil {
		log.Fatalf("err: %v", err)
	}
	for {
		rsp, err := stream.Recv()
		if err == io.EOF {
			break 
		}
		if err != nil {
			log.Fatalf("err: %v", err)
		}
		log.Debugf(" bidi  stream receive: %+v", rsp)
	}
{{- else if $method.ClientStreaming}}
	// Example usage of client-side streaming.
	stream, err := proxy.{{$rpcName}}(ctx)
	if err != nil {
		log.Fatalf("err: %v", err)
	}
	for i := 0; i < 5; i++ {
		if err := stream.Send(&{{$rpcReqType}}{}); err != nil {
			log.Fatalf("err: %v", err)
		}
	}
	rsp, err := stream.CloseAndRecv()
	if err != nil {
		log.Fatalf("err: %v", err)
	}
	log.Debugf("client stream receive: %+v", rsp)
{{- else if $method.ServerStreaming}}
	// Example usage of server-side streaming.
	stream, err := proxy.{{$rpcName}}(ctx, &{{$rpcReqType}}{})
	if err != nil {
		log.Fatalf("err: %v", err)
	}
	for {
		reply, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			log.Fatalf("err: %v", err)
		}
		log.Debugf("server stream receive: %+v", reply)
	}
{{- else}}
	// Example usage of unary client.
	reply, err := proxy.{{$rpcName}}(ctx, &{{$rpcReqType}}{})
	if err != nil {
		log.Fatalf("err: %v", err)
	}
	log.Debugf("simple  rpc   receive: %+v", reply)
{{- end}}
}
{{- end}}
{{- end}}

func main() {
	// Load configuration following the logic in trpc.NewServer.
	cfg, err := trpc.LoadConfig(trpc.ServerConfigPath)
	if err != nil {
		panic("load config fail: " + err.Error())
	}
	trpc.SetGlobalConfig(cfg)
	if err := trpc.Setup(cfg); err != nil {
		panic("setup plugin fail: " + err.Error())
	}
{{- range $index, $service := .Services -}}
{{- $svrNameCamelCase := $service.Name | camelcase -}}
{{- range $mindex, $method := $service.RPC -}}
{{- $rpcName := $method.Name | camelcase }}
	call{{$svrNameCamelCase}}{{$rpcName}}() 
{{- end}}
{{- end}}
}